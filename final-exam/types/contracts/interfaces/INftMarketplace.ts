/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface INftMarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "blockUser"
      | "buyAuctionNftWithErc20Token"
      | "buyAuctionNftWithNativeToken"
      | "buyFixedPriceNftWithErc20Token"
      | "buyFixedPriceNftWithNativeToken"
      | "cancelListingNft"
      | "isBlocked()"
      | "isBlocked(address)"
      | "listNft"
      | "listNft1155"
      | "listNft721"
      | "setTreasury"
      | "setTreasuryBuyerFee"
      | "setTreasurySellerFee"
      | "unblockUser"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "blockUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyAuctionNftWithErc20Token",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyAuctionNftWithNativeToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyFixedPriceNftWithErc20Token",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyFixedPriceNftWithNativeToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListingNft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlocked()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBlocked(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listNft",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listNft1155",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listNft721",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryBuyerFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasurySellerFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unblockUser",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "blockUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyAuctionNftWithErc20Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyAuctionNftWithNativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyFixedPriceNftWithErc20Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyFixedPriceNftWithNativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelListingNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlocked()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlocked(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listNft1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listNft721", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryBuyerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasurySellerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unblockUser",
    data: BytesLike
  ): Result;
}

export interface INftMarketplace extends BaseContract {
  connect(runner?: ContractRunner | null): INftMarketplace;
  waitForDeployment(): Promise<this>;

  interface: INftMarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  blockUser: TypedContractMethod<[user: AddressLike], [void], "nonpayable">;

  buyAuctionNftWithErc20Token: TypedContractMethod<
    [_listingId: BigNumberish, _amount: BigNumberish],
    [void],
    "payable"
  >;

  buyAuctionNftWithNativeToken: TypedContractMethod<
    [_listingId: BigNumberish],
    [void],
    "payable"
  >;

  buyFixedPriceNftWithErc20Token: TypedContractMethod<
    [_listingId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  buyFixedPriceNftWithNativeToken: TypedContractMethod<
    [_listingId: BigNumberish],
    [void],
    "payable"
  >;

  cancelListingNft: TypedContractMethod<
    [_listingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "isBlocked()": TypedContractMethod<[], [boolean], "view">;

  "isBlocked(address)": TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  listNft: TypedContractMethod<
    [
      _nftContract: AddressLike,
      _acceptToken: AddressLike,
      _nftId: BigNumberish,
      _amount: BigNumberish,
      _price: BigNumberish,
      _deadline: BigNumberish,
      _nftKind: BigNumberish,
      _sellKind: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  listNft1155: TypedContractMethod<
    [
      nftContract: AddressLike,
      acceptToken: AddressLike,
      nftId: BigNumberish,
      amount: BigNumberish,
      price: BigNumberish,
      _deadline: BigNumberish,
      sellKind: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  listNft721: TypedContractMethod<
    [
      nftContract: AddressLike,
      acceptToken: AddressLike,
      nftId: BigNumberish,
      price: BigNumberish,
      _deadline: BigNumberish,
      sellKind: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setTreasury: TypedContractMethod<
    [treasury: AddressLike],
    [void],
    "nonpayable"
  >;

  setTreasuryBuyerFee: TypedContractMethod<
    [newTreasuryBuyerFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTreasurySellerFee: TypedContractMethod<
    [newTreasurySellerFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  unblockUser: TypedContractMethod<[user: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "blockUser"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "buyAuctionNftWithErc20Token"
  ): TypedContractMethod<
    [_listingId: BigNumberish, _amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "buyAuctionNftWithNativeToken"
  ): TypedContractMethod<[_listingId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "buyFixedPriceNftWithErc20Token"
  ): TypedContractMethod<
    [_listingId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyFixedPriceNftWithNativeToken"
  ): TypedContractMethod<[_listingId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "cancelListingNft"
  ): TypedContractMethod<[_listingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isBlocked()"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isBlocked(address)"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "listNft"
  ): TypedContractMethod<
    [
      _nftContract: AddressLike,
      _acceptToken: AddressLike,
      _nftId: BigNumberish,
      _amount: BigNumberish,
      _price: BigNumberish,
      _deadline: BigNumberish,
      _nftKind: BigNumberish,
      _sellKind: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listNft1155"
  ): TypedContractMethod<
    [
      nftContract: AddressLike,
      acceptToken: AddressLike,
      nftId: BigNumberish,
      amount: BigNumberish,
      price: BigNumberish,
      _deadline: BigNumberish,
      sellKind: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listNft721"
  ): TypedContractMethod<
    [
      nftContract: AddressLike,
      acceptToken: AddressLike,
      nftId: BigNumberish,
      price: BigNumberish,
      _deadline: BigNumberish,
      sellKind: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTreasury"
  ): TypedContractMethod<[treasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasuryBuyerFee"
  ): TypedContractMethod<
    [newTreasuryBuyerFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTreasurySellerFee"
  ): TypedContractMethod<
    [newTreasurySellerFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unblockUser"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;

  filters: {};
}
