/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface NftMarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "blockUser"
      | "buyAuctionNftWithErc20Token"
      | "buyAuctionNftWithNativeToken"
      | "buyFixedPriceNftWithErc20Token"
      | "buyFixedPriceNftWithNativeToken"
      | "cancelListingNft"
      | "fakeListingStatus"
      | "initialize"
      | "isBlocked()"
      | "isBlocked(address)"
      | "listNft"
      | "listNft1155"
      | "listNft721"
      | "owner"
      | "releaseNft"
      | "renounceOwnership"
      | "setTreasury"
      | "setTreasuryBuyerFee"
      | "setTreasurySellerFee"
      | "transferOwnership"
      | "treasuryData"
      | "unblockUser"
      | "withdrawLockAmount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BlockUser"
      | "BuyNft"
      | "CancelListNft"
      | "Initialized"
      | "ListNft"
      | "OwnershipTransferred"
      | "PlaceBidNft"
      | "TreasuryBuyerFeeSet"
      | "TreasurySellerFeeSet"
      | "TreasurySet"
      | "UnblockUser"
      | "WithdrawLockAmount"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "blockUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyAuctionNftWithErc20Token",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyAuctionNftWithNativeToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyFixedPriceNftWithErc20Token",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyFixedPriceNftWithNativeToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListingNft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fakeListingStatus",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlocked()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBlocked(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listNft",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listNft1155",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listNft721",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseNft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryBuyerFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasurySellerFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unblockUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLockAmount",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "blockUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyAuctionNftWithErc20Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyAuctionNftWithNativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyFixedPriceNftWithErc20Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyFixedPriceNftWithNativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelListingNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fakeListingStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isBlocked()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlocked(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listNft1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listNft721", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "releaseNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryBuyerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasurySellerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unblockUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLockAmount",
    data: BytesLike
  ): Result;
}

export namespace BlockUserEvent {
  export type InputTuple = [user: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [user: string, timestamp: bigint];
  export interface OutputObject {
    user: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BuyNftEvent {
  export type InputTuple = [
    buyer: AddressLike,
    seller: AddressLike,
    nftContract: AddressLike,
    nftId: BigNumberish,
    amount: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    seller: string,
    nftContract: string,
    nftId: bigint,
    amount: bigint,
    price: bigint
  ];
  export interface OutputObject {
    buyer: string;
    seller: string;
    nftContract: string;
    nftId: bigint;
    amount: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelListNftEvent {
  export type InputTuple = [
    owner: AddressLike,
    nftContract: AddressLike,
    nftId: BigNumberish
  ];
  export type OutputTuple = [owner: string, nftContract: string, nftId: bigint];
  export interface OutputObject {
    owner: string;
    nftContract: string;
    nftId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListNftEvent {
  export type InputTuple = [
    owner: AddressLike,
    nftContract: AddressLike,
    acceptToken: AddressLike,
    nftId: BigNumberish,
    price: BigNumberish,
    amount: BigNumberish,
    listingCount: BigNumberish,
    nftKind: BigNumberish,
    sellKind: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    nftContract: string,
    acceptToken: string,
    nftId: bigint,
    price: bigint,
    amount: bigint,
    listingCount: bigint,
    nftKind: bigint,
    sellKind: bigint
  ];
  export interface OutputObject {
    owner: string;
    nftContract: string;
    acceptToken: string;
    nftId: bigint;
    price: bigint;
    amount: bigint;
    listingCount: bigint;
    nftKind: bigint;
    sellKind: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlaceBidNftEvent {
  export type InputTuple = [
    oldBidder: AddressLike,
    newBidder: AddressLike,
    nftContract: AddressLike,
    nftId: BigNumberish,
    amount: BigNumberish,
    oldBid: BigNumberish,
    newBid: BigNumberish
  ];
  export type OutputTuple = [
    oldBidder: string,
    newBidder: string,
    nftContract: string,
    nftId: bigint,
    amount: bigint,
    oldBid: bigint,
    newBid: bigint
  ];
  export interface OutputObject {
    oldBidder: string;
    newBidder: string;
    nftContract: string;
    nftId: bigint;
    amount: bigint;
    oldBid: bigint;
    newBid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryBuyerFeeSetEvent {
  export type InputTuple = [
    prevTreasuryBuyerFee: BigNumberish,
    newTreasuryBuyerFee: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    prevTreasuryBuyerFee: bigint,
    newTreasuryBuyerFee: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    prevTreasuryBuyerFee: bigint;
    newTreasuryBuyerFee: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasurySellerFeeSetEvent {
  export type InputTuple = [
    prevTreasurySellerFee: BigNumberish,
    newTreasurySellerFee: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    prevTreasurySellerFee: bigint,
    newTreasurySellerFee: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    prevTreasurySellerFee: bigint;
    newTreasurySellerFee: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasurySetEvent {
  export type InputTuple = [
    prevTreasury: AddressLike,
    newTreasury: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    prevTreasury: string,
    newTreasury: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    prevTreasury: string;
    newTreasury: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnblockUserEvent {
  export type InputTuple = [user: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [user: string, timestamp: bigint];
  export interface OutputObject {
    user: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawLockAmountEvent {
  export type InputTuple = [caller: AddressLike, value: BigNumberish];
  export type OutputTuple = [caller: string, value: bigint];
  export interface OutputObject {
    caller: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NftMarketplace extends BaseContract {
  connect(runner?: ContractRunner | null): NftMarketplace;
  waitForDeployment(): Promise<this>;

  interface: NftMarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  blockUser: TypedContractMethod<[_user: AddressLike], [void], "nonpayable">;

  buyAuctionNftWithErc20Token: TypedContractMethod<
    [_listingId: BigNumberish, _amount: BigNumberish],
    [void],
    "payable"
  >;

  buyAuctionNftWithNativeToken: TypedContractMethod<
    [_listingId: BigNumberish],
    [void],
    "payable"
  >;

  buyFixedPriceNftWithErc20Token: TypedContractMethod<
    [_listingId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  buyFixedPriceNftWithNativeToken: TypedContractMethod<
    [_listingId: BigNumberish],
    [void],
    "payable"
  >;

  cancelListingNft: TypedContractMethod<
    [_listingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  fakeListingStatus: TypedContractMethod<
    [_listingId: BigNumberish, _status: boolean],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [
      _initialOwner: AddressLike,
      _treasury: AddressLike,
      _sellerFee: BigNumberish,
      _buyerFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  "isBlocked()": TypedContractMethod<[], [boolean], "view">;

  "isBlocked(address)": TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  listNft: TypedContractMethod<
    [
      _nftContract: AddressLike,
      _acceptToken: AddressLike,
      _nftId: BigNumberish,
      _amount: BigNumberish,
      _price: BigNumberish,
      _deadline: BigNumberish,
      _nftKind: BigNumberish,
      _sellKind: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  listNft1155: TypedContractMethod<
    [
      _nftContract: AddressLike,
      _acceptToken: AddressLike,
      _nftId: BigNumberish,
      _amount: BigNumberish,
      _price: BigNumberish,
      _deadline: BigNumberish,
      _sellKind: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  listNft721: TypedContractMethod<
    [
      _nftContract: AddressLike,
      _acceptToken: AddressLike,
      _nftId: BigNumberish,
      _price: BigNumberish,
      _deadline: BigNumberish,
      _sellKind: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  releaseNft: TypedContractMethod<
    [_listingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setTreasury: TypedContractMethod<
    [_newTreasury: AddressLike],
    [void],
    "nonpayable"
  >;

  setTreasuryBuyerFee: TypedContractMethod<
    [_newTreasuryBuyerFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTreasurySellerFee: TypedContractMethod<
    [_newTreasurySellerFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasuryData: TypedContractMethod<
    [],
    [
      [string, bigint, bigint] & {
        treasury: string;
        treasurySellerFeeBPS: bigint;
        treasuryBuyerFeeBPS: bigint;
      }
    ],
    "view"
  >;

  unblockUser: TypedContractMethod<[_user: AddressLike], [void], "nonpayable">;

  withdrawLockAmount: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "blockUser"
  ): TypedContractMethod<[_user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "buyAuctionNftWithErc20Token"
  ): TypedContractMethod<
    [_listingId: BigNumberish, _amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "buyAuctionNftWithNativeToken"
  ): TypedContractMethod<[_listingId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "buyFixedPriceNftWithErc20Token"
  ): TypedContractMethod<
    [_listingId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyFixedPriceNftWithNativeToken"
  ): TypedContractMethod<[_listingId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "cancelListingNft"
  ): TypedContractMethod<[_listingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fakeListingStatus"
  ): TypedContractMethod<
    [_listingId: BigNumberish, _status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _initialOwner: AddressLike,
      _treasury: AddressLike,
      _sellerFee: BigNumberish,
      _buyerFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isBlocked()"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isBlocked(address)"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "listNft"
  ): TypedContractMethod<
    [
      _nftContract: AddressLike,
      _acceptToken: AddressLike,
      _nftId: BigNumberish,
      _amount: BigNumberish,
      _price: BigNumberish,
      _deadline: BigNumberish,
      _nftKind: BigNumberish,
      _sellKind: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listNft1155"
  ): TypedContractMethod<
    [
      _nftContract: AddressLike,
      _acceptToken: AddressLike,
      _nftId: BigNumberish,
      _amount: BigNumberish,
      _price: BigNumberish,
      _deadline: BigNumberish,
      _sellKind: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listNft721"
  ): TypedContractMethod<
    [
      _nftContract: AddressLike,
      _acceptToken: AddressLike,
      _nftId: BigNumberish,
      _price: BigNumberish,
      _deadline: BigNumberish,
      _sellKind: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "releaseNft"
  ): TypedContractMethod<[_listingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasury"
  ): TypedContractMethod<[_newTreasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasuryBuyerFee"
  ): TypedContractMethod<
    [_newTreasuryBuyerFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTreasurySellerFee"
  ): TypedContractMethod<
    [_newTreasurySellerFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasuryData"
  ): TypedContractMethod<
    [],
    [
      [string, bigint, bigint] & {
        treasury: string;
        treasurySellerFeeBPS: bigint;
        treasuryBuyerFeeBPS: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "unblockUser"
  ): TypedContractMethod<[_user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawLockAmount"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BlockUser"
  ): TypedContractEvent<
    BlockUserEvent.InputTuple,
    BlockUserEvent.OutputTuple,
    BlockUserEvent.OutputObject
  >;
  getEvent(
    key: "BuyNft"
  ): TypedContractEvent<
    BuyNftEvent.InputTuple,
    BuyNftEvent.OutputTuple,
    BuyNftEvent.OutputObject
  >;
  getEvent(
    key: "CancelListNft"
  ): TypedContractEvent<
    CancelListNftEvent.InputTuple,
    CancelListNftEvent.OutputTuple,
    CancelListNftEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "ListNft"
  ): TypedContractEvent<
    ListNftEvent.InputTuple,
    ListNftEvent.OutputTuple,
    ListNftEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PlaceBidNft"
  ): TypedContractEvent<
    PlaceBidNftEvent.InputTuple,
    PlaceBidNftEvent.OutputTuple,
    PlaceBidNftEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryBuyerFeeSet"
  ): TypedContractEvent<
    TreasuryBuyerFeeSetEvent.InputTuple,
    TreasuryBuyerFeeSetEvent.OutputTuple,
    TreasuryBuyerFeeSetEvent.OutputObject
  >;
  getEvent(
    key: "TreasurySellerFeeSet"
  ): TypedContractEvent<
    TreasurySellerFeeSetEvent.InputTuple,
    TreasurySellerFeeSetEvent.OutputTuple,
    TreasurySellerFeeSetEvent.OutputObject
  >;
  getEvent(
    key: "TreasurySet"
  ): TypedContractEvent<
    TreasurySetEvent.InputTuple,
    TreasurySetEvent.OutputTuple,
    TreasurySetEvent.OutputObject
  >;
  getEvent(
    key: "UnblockUser"
  ): TypedContractEvent<
    UnblockUserEvent.InputTuple,
    UnblockUserEvent.OutputTuple,
    UnblockUserEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawLockAmount"
  ): TypedContractEvent<
    WithdrawLockAmountEvent.InputTuple,
    WithdrawLockAmountEvent.OutputTuple,
    WithdrawLockAmountEvent.OutputObject
  >;

  filters: {
    "BlockUser(address,uint40)": TypedContractEvent<
      BlockUserEvent.InputTuple,
      BlockUserEvent.OutputTuple,
      BlockUserEvent.OutputObject
    >;
    BlockUser: TypedContractEvent<
      BlockUserEvent.InputTuple,
      BlockUserEvent.OutputTuple,
      BlockUserEvent.OutputObject
    >;

    "BuyNft(address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      BuyNftEvent.InputTuple,
      BuyNftEvent.OutputTuple,
      BuyNftEvent.OutputObject
    >;
    BuyNft: TypedContractEvent<
      BuyNftEvent.InputTuple,
      BuyNftEvent.OutputTuple,
      BuyNftEvent.OutputObject
    >;

    "CancelListNft(address,address,uint256)": TypedContractEvent<
      CancelListNftEvent.InputTuple,
      CancelListNftEvent.OutputTuple,
      CancelListNftEvent.OutputObject
    >;
    CancelListNft: TypedContractEvent<
      CancelListNftEvent.InputTuple,
      CancelListNftEvent.OutputTuple,
      CancelListNftEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "ListNft(address,address,address,uint256,uint256,uint256,uint256,uint8,uint8)": TypedContractEvent<
      ListNftEvent.InputTuple,
      ListNftEvent.OutputTuple,
      ListNftEvent.OutputObject
    >;
    ListNft: TypedContractEvent<
      ListNftEvent.InputTuple,
      ListNftEvent.OutputTuple,
      ListNftEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PlaceBidNft(address,address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      PlaceBidNftEvent.InputTuple,
      PlaceBidNftEvent.OutputTuple,
      PlaceBidNftEvent.OutputObject
    >;
    PlaceBidNft: TypedContractEvent<
      PlaceBidNftEvent.InputTuple,
      PlaceBidNftEvent.OutputTuple,
      PlaceBidNftEvent.OutputObject
    >;

    "TreasuryBuyerFeeSet(uint16,uint16,uint256)": TypedContractEvent<
      TreasuryBuyerFeeSetEvent.InputTuple,
      TreasuryBuyerFeeSetEvent.OutputTuple,
      TreasuryBuyerFeeSetEvent.OutputObject
    >;
    TreasuryBuyerFeeSet: TypedContractEvent<
      TreasuryBuyerFeeSetEvent.InputTuple,
      TreasuryBuyerFeeSetEvent.OutputTuple,
      TreasuryBuyerFeeSetEvent.OutputObject
    >;

    "TreasurySellerFeeSet(uint16,uint16,uint256)": TypedContractEvent<
      TreasurySellerFeeSetEvent.InputTuple,
      TreasurySellerFeeSetEvent.OutputTuple,
      TreasurySellerFeeSetEvent.OutputObject
    >;
    TreasurySellerFeeSet: TypedContractEvent<
      TreasurySellerFeeSetEvent.InputTuple,
      TreasurySellerFeeSetEvent.OutputTuple,
      TreasurySellerFeeSetEvent.OutputObject
    >;

    "TreasurySet(address,address,uint40)": TypedContractEvent<
      TreasurySetEvent.InputTuple,
      TreasurySetEvent.OutputTuple,
      TreasurySetEvent.OutputObject
    >;
    TreasurySet: TypedContractEvent<
      TreasurySetEvent.InputTuple,
      TreasurySetEvent.OutputTuple,
      TreasurySetEvent.OutputObject
    >;

    "UnblockUser(address,uint40)": TypedContractEvent<
      UnblockUserEvent.InputTuple,
      UnblockUserEvent.OutputTuple,
      UnblockUserEvent.OutputObject
    >;
    UnblockUser: TypedContractEvent<
      UnblockUserEvent.InputTuple,
      UnblockUserEvent.OutputTuple,
      UnblockUserEvent.OutputObject
    >;

    "WithdrawLockAmount(address,uint256)": TypedContractEvent<
      WithdrawLockAmountEvent.InputTuple,
      WithdrawLockAmountEvent.OutputTuple,
      WithdrawLockAmountEvent.OutputObject
    >;
    WithdrawLockAmount: TypedContractEvent<
      WithdrawLockAmountEvent.InputTuple,
      WithdrawLockAmountEvent.OutputTuple,
      WithdrawLockAmountEvent.OutputObject
    >;
  };
}
